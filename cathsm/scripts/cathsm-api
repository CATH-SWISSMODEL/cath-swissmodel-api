#!/usr/bin/env python3

"""
CLI tool to search for template structures for modelling
"""

# core
import argparse
import logging
import os
import re
import string
import tempfile
from multiprocessing import Pool

# local
import cathsm.apiclient as apiclient
from cathsm.apiclient.tasks import CathSMSequenceFileTask

DEFAULT_MAX_WORKERS = 5

# logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(message)s',
    datefmt='%d-%m-%Y %H:%M:%S')
LOG = logging.getLogger(__name__)

DEFAULT_API1_BASE = 'https://api01.cathdb.info'
DEFAULT_API2_BASE = 'https://beta.swissmodel.expasy.org'
CATHAPI_OPENAPI_URL = '{:api1_base}/swagger/?format=openapi'
SM_OPENAPI_URL = '{:api2_base}/swagger/?format=openapi'

# CLI args
parser = argparse.ArgumentParser()
parser.add_argument('--in', '-i', dest='infile', type=str, required=True,
                    help='query sequence (FASTA)')
parser.add_argument('--outdir', '-o', dest='outdir', type=str, required=True,
                    help='output directory')
parser.add_argument('--api1_user', '-u', dest='api1_user', type=str, required=True,
                    help='specify user for API1')
parser.add_argument('--api2_user', dest='api2_user', type=str, required=False,
                    help='specify user for API2 (default: api1_user)')
parser.add_argument('--max_workers', dest='max_workers', type=int, default=DEFAULT_MAX_WORKERS,
                    help='Number of jobs to process in parallel')
parser.add_argument('--api1_base', dest='api1_base', type=str, default=DEFAULT_API1_BASE,
                    required=False,
                    help='override base url for API1')
parser.add_argument('--api2_base', dest='api2_base', type=str, default=DEFAULT_API2_BASE,
                    required=False,
                    help='override base url for API2')
parser.add_argument('--startseq', dest='startseq', type=int, default=1,
                    help='choose the sequence to start from')
parser.add_argument('--delete-invalid-token', dest='delete_invalid_token', action='store_true', default=False,
                    help="chose whether to delete any tokens that are invalid")


if __name__ == '__main__':
    args = parser.parse_args()

    api2_user = args.api2_user if hasattr(
        args, 'api2_user') else args.api1_user

    pipeline = CathSMSequenceFileTask(infile=args.infile,
                                      outdir=args.outdir,
                                      max_workers=args.max_workers,
                                      startseq=args.startseq,
                                      api1_base=args.api1_base,
                                      api1_user=args.api1_user,
                                      api2_base=args.api2_base,
                                      api2_user=api2_user,
                                      )

    try:
        pipeline.run()
    except apiclient.errors.AuthenticationError as err:
        LOG.info("Invalid API username/password")
        exit(1)
    except apiclient.errors.InvalidTokenError as err:
        LOG.info("Invalid API token: {}".format(str(err)))
        exit(2)
