#!/usr/bin/env python3

"""
CLI tool to search for template structures for modelling
"""

# core
import argparse
import logging
import tempfile

# non-core
import requests
from Bio import SeqIO

# local
from cathsm.apiclient import managers, models, clients

# logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(message)s',
    datefmt='%d-%m-%Y %H:%M:%S')
LOG = logging.getLogger(__name__)

CATHAPI_OPENAPI_URL = 'http://{:api1_base}/swagger/?format=openapi'
SM_OPENAPI_URL = 'http://{:api2_base}/swagger/?format=openapi'

# CLI args
parser = argparse.ArgumentParser()
parser.add_argument('--in', '-i', dest='infile', type=str, required=True,
                    help='query sequence (FASTA)')
parser.add_argument('--outdir', '-o', dest='outdir', type=str, required=True,
                    help='output directory')
parser.add_argument('--user', '-u', dest='user', type=str, required=False,
                    help='API user')
parser.add_argument('--api1_base', dest='api1_base', type=str, required=False,
                    default=None,
                    help='override base url for API1')
parser.add_argument('--api2_base', dest='api2_base', type=str, required=False,
                    default=None,
                    help='override base url for API2')


def process_sequence(seq, seq_count):
    """Processes a query sequence"""

    LOG.info("Searching for template structures ... ")

    api1submit = models.SubmitSelectTemplate(
        query_id=seq.id, query_sequence=seq.seq)

    api1file = tempfile.NamedTemporaryFile(
        mode='w', encoding='utf-8', delete=False)

    with api1file as api1fh:
        api1submit.to_file(api1fh)

    api1 = managers.CathSelectTemplateManager(
        base_url=args.api1_base,
        infile=api1file.name,
        outfile='foo',
        api_user=args.user,
    )
    api1.run()

    # swagger_app, swagger_client = api1.api_client.get_swagger()
    # hit_operation_id = 'select-template_resolved_hits_read'  # TODO: this is nasty
    # req, resp = swagger_app.op[hit_operation_id](
    #     uuid=api1.task_uuid)
    # req.produce('application/json')
    # hits = swagger_client.request((req, resp)).data

    # TODO: abstract this away to clients / managers / swagger? ...
    api1_base = args.api1_base
    task_uuid = api1.task_uuid
    headers = {'Authorization': 'Token ' + api1.api_token}

    hits_url = '{api1_base}/api/select-template/{task_uuid}/resolved_hits'.format(
        api1_base=api1_base, task_uuid=task_uuid)
    LOG.info("url: %s", hits_url)
    resp = requests.get(hits_url, headers=headers)
    resp.raise_for_status()
    hits = resp.json()

    # hits = managers.GetSelectTemplateHits(task_uuid=api1.task_uuid)
    # hits = api1.funfam_resolved_scan_hits()

    LOG.info("  ... done (found X hits): %s", len(hits))

    for hit_count, hit in enumerate(hits, 1):

        aln_url = '{api1_base}/api/select-template/hit/{hit_uuid}/alignments'.format(
            api1_base=api1_base, hit_uuid=hit['uuid'])
        LOG.info("url: %s", aln_url)
        resp = requests.get(aln_url, headers=headers)
        resp.raise_for_status()
        alns = resp.json()
        aln = alns[0]

        LOG.info("SEQUENCE %s, HIT %s [%s]: FunFam '%s': %s",
                 seq_count, hit_count, hit['query_range'], hit['ff_id'], hit['ff_name'])

        LOG.info("Modelling region against template %s, %s (offset %s) ... ",
                 aln['pdb_id'], aln['auth_asym_id'], aln['template_seqres_offset'])

        LOG.info("%10s %8s: %s", 'QUERY',
                 hit['query_range'],
                 aln['template_sequence'], )
        LOG.info("%10s %8s: %s", '{}, {}'.format(aln['pdb_id'], aln['auth_asym_id']),
                 aln['template_seqres_offset'],
                 aln['template_sequence'])

        api2submit = models.SubmitAlignment(
            target_sequence=aln['target_sequence'],
            template_sequence=aln['template_sequence'],
            template_seqres_offset=aln['template_seqres_offset'],
            pdb_id=aln['pdb_id'],
            auth_asym_id=aln['auth_asym_id'],
        )

        api2file = tempfile.NamedTemporaryFile(
            mode='w', encoding='utf-8', delete=False)

        with api2file as api2fh:
            api2submit.to_file(api2fh)

        api2 = managers.SMAlignmentManager(
            infile=api2file.name,
            outfile='foo',
            api_user=args.user,
        )
        api2.run()


def run(*, infile):
    """Runs the main application"""

    LOG.info("Parsing sequences from %s", infile)

    seq_count = 0
    for seq in SeqIO.parse(infile, "fasta"):
        seq_count += 1
        LOG.info("SEQUENCE %d: '%s' (%d residues)",
                 seq_count, seq.id, len(seq))
        process_sequence(seq, seq_count)


if __name__ == '__main__':
    args = parser.parse_args()
    run(infile=args.infile)
